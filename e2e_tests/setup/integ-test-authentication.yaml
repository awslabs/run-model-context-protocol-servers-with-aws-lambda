# This CloudFormation template configures an IAM identity provider that uses GitHub's OIDC,
# enabling GitHub Actions to run the integration tests against the AWS account where this
# template is deployed.

Parameters:
  GitHubOrg:
    Description: Name of GitHub organization/user (case sensitive)
    Type: String
  RepositoryName:
    Description: Name of GitHub repository (case sensitive)
    Type: String
  OIDCProviderArn:
    Description: Arn for the GitHub OIDC Provider.
    Default: ""
    Type: String
  OIDCAudience:
    Description: Audience supplied to configure-aws-credentials.
    Default: "sts.amazonaws.com"
    Type: String

Conditions:
  CreateOIDCProvider: !Equals
    - !Ref OIDCProviderArn
    - ""

Resources:
  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Condition: CreateOIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1

  IntegrationTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !If
                - CreateOIDCProvider
                - !Ref GithubOidc
                - !Ref OIDCProviderArn
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: !Ref OIDCAudience
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${RepositoryName}:*

  IntegrationTestPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: mcp-lambda-integration-test-runner
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow integration tests to manage CloudFormation stacks to deploy the example MCP servers
          - Effect: Allow
            Action:
              - "cloudformation:*"
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/LambdaMcpServer-*"
          - Effect: Allow
            Action:
              - "ssm:GetParameter"
              - "ssm:GetParameters"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cdk-bootstrap/*/version"
          - Effect: Allow
            Action:
              - "ssm:*Parameter"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/LambdaMcpServer-*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/cdk-*-cfn-exec-role-${AWS::AccountId}-${AWS::Region}"
          # Allow CDK to manage templates and assets in the CDK bucket
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:AbortMultipartUpload"
              - "s3:ListMultipartUploadParts"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:GetEncryptionConfiguration"
            Resource:
              - "arn:aws:s3:::cdk*"
          # Allow integration tests to invoke Lambda functions, Bedrock models, and retrieve the OAuth client secret
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "lambda:InvokeFunctionUrl"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mcp-server-*"
          - Effect: Allow
            Action:
              - "bedrock:InvokeModel"
            Resource:
              - !Sub "arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*"
              - "arn:aws:bedrock:*::foundation-model/*"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mcp-lambda-examples-oauth-client-secret-*"
      Roles:
        - !Ref IntegrationTestRole

  # CDK will bootstrap a role with this policy, and will set it
  # as the role for all deployed CloudFormation stacks
  CdkCfnExecutionPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: mcp-lambda-integ-test-cdk-cfn-execution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:*"
              - "apigateway:*"
              - "logs:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "bedrock-agentcore:*Gateway*"
              - "bedrock-agentcore:*WorkloadIdentity"
              - "bedrock-agentcore:*CredentialProvider"
              - "bedrock-agentcore:*Token*"
            Resource:
              - !Sub "arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - "iam:PassRole"
            Resource:
              - !GetAtt LambdaFunctionsRole.Arn
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/mcp-lambda-example-agentcore-gateways"
          - Effect: Allow
            Action:
              - "secretsmanager:*"
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:bedrock-agentcore-identity*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
            Resource:
              - "arn:aws:s3:::cdk*"
          - Effect: Allow
            Action:
              - "ssm:GetParameter"
              - "ssm:GetParameters"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cdk-bootstrap/*/version"

  LambdaFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: mcp-lambda-example-servers
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  LambdaSecretsAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: mcp-lambda-example-servers-secret-access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - "*"
      Roles:
        - !Ref LambdaFunctionsRole

  BedrockAgentCoreGatewaysRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: mcp-lambda-example-agentcore-gateways
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: bedrock-agentcore.amazonaws.com

  # From https://github.com/aws/bedrock-agentcore-starter-toolkit/blob/main/src/bedrock_agentcore_starter_toolkit/operations/gateway/constants.py#L58-L80
  BedrockAgentCoreGatewaysPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: bedrock-agentcore-full-access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "bedrock-agentcore:*"
            Resource:
              - "arn:aws:bedrock-agentcore:*:*:*"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - "arn:aws:lambda:*:*:function:*"
      Roles:
        - !Ref BedrockAgentCoreGatewaysRole

Outputs:
  Role:
    Value: !GetAtt IntegrationTestRole.Arn
